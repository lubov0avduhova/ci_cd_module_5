name: CI/CD Pipeline

# Используем стратегию матрицы для кроссплатформенной сборки (Linux и Windows)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # На Ubuntu
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # Для разных ОС
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Устанавливаем JDK 17
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin' 

      # Устанавливаем Maven
      - name: Set up Maven
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin' 
          maven-version: 3.8.4

      # Сборка проекта с помощью Maven
      - name: Build with Maven
        run: mvn clean install

      # Тестируем проект (если у вас есть тесты)
      - name: Run tests
        run: mvn test

  # Публикация Docker образа
  docker-push:
    runs-on: ubuntu-latest  # Убедитесь, что вы используете Linux для работы с Docker
    needs: build  # Этот шаг выполняется только после завершения сборки
    steps:
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t my-spring-app:latest .
        
      - name: Tag Docker image
        run: |
          docker tag my-spring-app:latest ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest

  # Деплой на удаленный сервер через SSH
  deploy:
    runs-on: ubuntu-latest  # Используем Linux для деплоя
    needs: docker-push  # Этот шаг выполняется после успешного пуша Docker образа
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Настроим SSH
      - name: Set up SSH keys
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Подключаемся к серверу и деплоим приложение
      - name: Deploy to remote server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest
            docker stop my-spring-app || true
            docker rm my-spring-app || true
            docker run -d --name my-spring-app -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest
          EOF
        env:
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
